name: Calculate Version Tag

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.YNPUT_BOT_TOKEN }}
  LABEL_DELIMITTER: ", "

jobs:
  get-pr-labels:
    runs-on: ubuntu-latest
    outputs:
      label_list: ${{ steps.merged_pr_labels.outputs.label_list }}

    steps:
      - name: üìÖ Get the last release date
        id: last_release_date
        run: |
          last_release=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | [.published_at] | @tsv' | awk -F '\t' '{print $1 " " $2 " " $3}' | head -n 1)
          echo "last_release_date=$last_release" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get labels of merged PRs since last release
        id: merged_pr_labels
        env:
          release_date: ${{ steps.last_release_date.outputs.last_release_date }}
        # INFO last line conversion is required since $GITHUB_OUPUT doesn't except multi-line strings
        run: |
          json_data_pr_labels=$(gh pr list --state merged --search "merged:>=${{ steps.last_release_date.outputs.last_release }}" --json labels --repo ${{ github.repository }} )
          pr_label_list=$(echo "$json_data_pr_labels" | jq -r '.[].labels[].name' | sort | uniq | tr '\n' '${{ env.LABEL_DELIMITTER }}')
          label_list=${pr_label_list%,}
          echo "label_list=$label_list" >> $GITHUB_OUTPUT
  
  calculate-version-bump:
    runs-on: ubuntu-latest
    needs: get-pr-labels
    outputs:
      next_version_proposal:

    steps:
      - name: üîç Check for valid labels
        id: valid_version_label
        env:
          LABEL_LIST: ${{ needs.get-pr-labels.outputs.label_list }}
          MINOR_LABEL: ${{ vars.MINOR_BUMP_LABEL }}
          PATCH_LABEL: ${{ vars.PATCH_BUMP_LABEL }}
        run: |
          # INFO convert csv string to bash arrays
          # TODO fix up first line so they can be handled in a streamilned way
          IFS=',' read -r -a label_list <<< "${{ env.LABEL_LIST }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a minor_patterns <<< "${{ env.MINOR_LABEL }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a patch_patterns <<< "${{ env.PATCH_LABEL }}"
          minor_patch=${{ env.PATCH_LABEL }}

          echo "pr_labels=${label_list[*]}" >> $GITHUB_OUTPUT

          for label in ${minor_patterns[@]}; do
            if echo "${label_list[*]}" | grep -iqFe "$label"; then
              echo "version_increment=minor" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          # for label in ${patch_patterns[@]}; do
          #   if echo "${label_list[*]}" | grep -iqFe "$label"; then
          #     echo "version_increment=patch" >> $GITHUB_OUTPUT
          #     exit 0
          #   fi
          # done

      - name: ‚ùó Validate labels
        run: |
          echo "version increment ${{ steps.valid_version_label.outputs.version_increment }}"

          if [ -z "${{ steps.valid_version_label.outputs.version_increment }}" ]; then
            # TODO Format using line breaks - not supported by annotations
            echo "::group::::error::Error Group"
            echo "::error::No valid versioning labels found in PRs.
            echo "::error::Only found these labels: ${{ steps.valid_version_label.outputs.pr_labels }}."
            echo "::error::Are you sure you want to create a new release?"
            echo "::endgroup::"
            exit 1
          fi
