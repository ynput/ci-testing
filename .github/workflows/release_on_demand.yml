name: Release [demand]
# TODO research using the github api instead of cloning repo
on:
  workflow_dispatch:
    # TODO add input for pre-calculated version
    # TODO add trigger branch (develop) to gh comamnds
env:
  zip_file: artifacts.zip
  tar_file: artifacts.tar.gz
  zip_artifact: "test-zip"
  tar_artifact: "test-tar"
  main_branch: "main"
  LABEL_DELIMITTER: ", "
  GH_TOKEN: ${{ secrets.YNPUT_BOT_TOKEN }}

jobs:
  merge-to-main:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ env.main_branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.main_branch }}
          fetch-depth: 0

      - name: üîë Set Bot Authentication
        run: |
          git config --global user.email "${{ secrets.CI_EMAIL }}"
          git config --global user.name "${{ secrets.CI_USER }}"

      - name: üîÄ Merge ${{ github.ref_name }} -> ${{ env.main_branch }}
        run: |
          git pull origin ${{ github.ref_name }}
          git merge --no-ff origin/${{ github.ref_name }} -m "[Automated] Merged ${{ github.ref_name }} -> ${{ env.main_branch }}"

      - name: üîè Push to protected main branch
        uses: CasperWA/push-protected@v2.15.0
        with:
          token: ${{ secrets.YNPUT_BOT_TOKEN }}
          branch: ${{ env.main_branch }}
          tags: true
          unprotect_reviews: true


  get-version-increment:
    runs-on: ubuntu-latest
    outputs:
      version-increment: ${{ steps.valid_version_label.outputs.version_increment }}

    steps:
      - name: üìÖ Get the latest release date
        id: last_release_date
        run: |
          last_release=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | [.published_at] | @tsv' | awk -F '\t' '{print $1 " " $2 " " $3}' | head -n 1)
          echo "last_release_date=$last_release" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get labels of merged PRs since last release
        id: merged_pr_labels
        env:
          release_date: ${{ steps.last_release_date.outputs.last_release_date }}
        # INFO last line conversion is required since $GITHUB_OUPUT doesn't except multi-line strings
        run: |
          json_data_pr_labels=$(gh pr list --state merged --search "merged:>=${{ env.release_date }}" --json labels --repo ${{ github.repository }})
          echo "$json_data_pr_labels"
          pr_label_list=$(echo "$json_data_pr_labels" | jq -r '.[].labels[].name' | sort | uniq | tr '\n' '${{ env.LABEL_DELIMITTER }}')
          label_list=${pr_label_list%,}
          echo "$label_list"
          echo "label_list=$label_list" >> $GITHUB_OUTPUT

      - name: üîç Check for valid labels
        id: valid_version_label
        env:
          LABEL_LIST: ${{ steps.merged_pr_labels.outputs.label_list }}
          MINOR_LABEL: ${{ vars.MINOR_BUMP_LABEL }}
          PATCH_LABEL: ${{ vars.PATCH_BUMP_LABEL }}
        run: |
          # INFO convert csv string to bash arrays
          # TODO fix up first line so they can be handled in a streamilned way
          IFS=',' read -r -a label_list <<< "${{ env.LABEL_LIST }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a minor_patterns <<< "${{ env.MINOR_LABEL }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a patch_patterns <<< "${{ env.PATCH_LABEL }}"
          minor_patch=${{ env.PATCH_LABEL }}

          echo "pr_labels=${label_list[*]}" >> $GITHUB_OUTPUT

          for label in ${minor_patterns[@]}; do
            if echo "${label_list[*]}" | grep -iqFe "$label"; then
              echo "version_increment=minor" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          for label in ${patch_patterns[@]}; do
            if echo "${label_list[*]}" | grep -iqFe "$label"; then
              echo "version_increment=patch" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "version_increment=''" >> $GITHUB_OUTPUT
          exit 0

      - name: ‚ùó Validate labels
        if: ${{ steps.last_release_date.outputs.last_release_date }}
        run: |
          if [ -z "${{ steps.valid_version_label.outputs.version_increment }}" ]; then
            # TODO Format using line breaks - not supported by annotations
            echo "::error:: No valid versioning labels found in PRs. Only found these labels: ${{ steps.valid_version_label.outputs.pr_labels }}. Are you sure you want to create a new release?"
            exit 1
          fi


  init-version-tag:
    runs-on: ubuntu-latest
    needs: get-version-increment
    env:
      VERSION_INCREMENT: ${{needs.get-version-increment.outputs.version-increment}}
    outputs:
      version_tag: "${{ steps.set_tag.outputs.major }}.${{ steps.set_tag.outputs.minor }}.${{ steps.set_tag.outputs.patch }}"

    steps:
      - name: Assign inital Version Tag
        if: ${{ ! env.VERSION_INCREMENT }}
        id: default_version_tag
        run: |
          echo "major=${{ vars.INIT_MAJOR || 0 }}" >> $GITHUB_OUTPUT 
          echo "minor=${{ vars.INIT_MINOR || 1 }}" >> $GITHUB_OUTPUT
          echo "patch=${{ vars.INIT_PATCH || 0 }}" >> $GITHUB_OUTPUT

      # TODO dive into the action as reference to implement custom actions
      - name: üîº Get next Version Tag
        uses: reecetech/version-increment@2024.4.4
        id: calculated_version_tag
        if:  ${{ env.VERSION_INCREMENT }}
        with:
          scheme: semver
          increment: ${{ env.VERSION_INCREMENT }}
          release_branch: main
          use_api: true

      - name: Set Version Tag
        id: set_tag
        run: |
          echo "major=${{ steps.calculated_version_tag.outputs.major-version || steps.default_version_tag.outputs.major }}" >> $GITHUB_OUTPUT
          echo "minor=${{ steps.calculated_version_tag.outputs.minor-version || steps.default_version_tag.outputs.minor }}" >> $GITHUB_OUTPUT
          echo "patch=${{ steps.calculated_version_tag.outputs.patch-version || steps.default_version_tag.outputs.patch }}" >> $GITHUB_OUTPUT


  update-develop:
    runs-on: ubuntu-latest
    needs: merge-to-main

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ github.ref_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: üîë Set Bot Authentication
        run: |
          # INFO might also require bit token first
          git config --global user.email "${{ secrets.CI_EMAIL }}"
          git config --global user.name "${{ secrets.CI_USER }}"

      - name: üîÅ Merge ${{ env.main_branch }} -> ${{ github.ref_name }}
        run: |
          git pull origin ${{ env.main_branch }}
          git merge origin/${{ env.main_branch }} -m "[Automated] Merged ${{ env.main_branch }} -> ${{ github.ref_name }}"
          git push origin ${{ github.ref_name }}


  build-from-main:
    runs-on: ubuntu-latest
    needs: 
      - merge-to-main

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ env.main_branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.main_branch }}
          fetch-depth: 0

      # INFO placeholder artifact for repo-dependent modification
      - name: Create artifacts
        run: |
          zip -r ${{ env.zip_file }} . -x "*/\.*"
          tar -czvf ${{ env.tar_file }} --exclude=".*" .
      
      - name: üîº Upload zip artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.zip_artifact }}
          path: |
            ${{ env.zip_file }}

      - name: üîº Upload tar.gz artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.tar_artifact }}
          path: |
            ${{ env.tar_file }}


  create-release:
    runs-on: ubuntu-latest
    needs: 
      - build-from-main
      - init-version-tag
    env:
      release_tag: ${{ needs.init-version-tag.outputs.version_tag }}

    steps:
      - name: üîΩ Download zip artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.zip_artifact }}

      - name: üîΩ Download tar artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.tar_artifact }}

      - name: üöÄ Create Github Release Draft
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.release_tag }}
          generateReleaseNotes: true
          artifacts: ${{ env.zip_file }}, ${{ env.tar_file }}
          token: ${{ secrets.YNPUT_BOT_TOKEN }}
          draft: true


  verify-release:
    runs-on: ubuntu-latest
    needs:
      - init-version-tag
      - create-release
    env:
     expected_version_tag: ${{ needs.init-version-tag.outputs.version_tag }}
    # INFO this will casue an error if a release draft with the same tag already exists
    steps:
      - name: Fetch Current Release Draft
        id: fetch-current-release-draft
        run: |
          current_release_name="$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == true) | .name')"
          current_release_name=$(echo "$current_release_name" | tr -d '\n')
          echo "current_release_name=$current_release_name" >> $GITHUB_OUTPUT

      - name: üîç Check Release-Draft Name
        id: check-release-tag
        env:
          current_release_draft: ${{ steps.fetch-current-release-draft.outputs.current_release_name }}

        run: |
          if [ "${{ env.expected_version_tag }}" == "${{ env.current_release_draft }}" ]; then
            echo "Success: Release found with the expected name ${{ env.expected_version_tag }}."
            exit 0
          fi

          echo "::error:: Expected tag ${{ env.expected_version_tag }}, but found ${{ env.current_release_draft }}."
          exit 1
