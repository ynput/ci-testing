name: Release [demand]
# TODO research using the github api instead of cloning repo
on:
  workflow_dispatch:
    # TODO add trigger branch (develop) to gh commands
  workflow_call:
    inputs:
      major:
        type: string
      minor:
        type: string
      patch:
        type: string

    secrets:
      token:
        required: true
      email:
        required: true
      user:
        required: true

env:
  LABEL_DELIMITTER: ", "
  GH_TOKEN: ${{ secrets.token || secrets.YNPUT_BOT_TOKEN}}
  GH_USER: ${{ secrets.user || secrets.CI_USER }}
  GH_EMAIL: ${{ secrets.email || secrets.CI_EMAIL }}
  MAJOR: ${{ inputs.major || vars.MAJOR || 0 }}
  MINOR: ${{ inputs.minor || vars.MINOR || 1 }}
  PATCH: ${{ inputs.patch || vars.PATCH || 0 }}
  ARTIFACT_NAME: "$(basename '${{ github.repository }}')-package"

jobs:
  get-latest-releases:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.unpack-release.outputs.name }}
      tag: ${{ steps.unpack-release.outputs.tag }}
      date: ${{ steps.unpack-release.outputs.date }}
      draft: ${{ steps.unpack-release.outputs.draft }}
      latest: ${{ steps.unpack-release.outputs.latest }}

    steps:
      - name: Get latest release
        id: latest-release
        # TODO test what happens if no release is present
        run: |
          release=$(gh release view --repo ${{ github.repository }} 2>/dev/null)
          release_data=$(gh release list --limit 1 --repo ${{ github.repository }} --json createdAt,isDraft,isLatest,isPrerelease,name,publishedAt,tagName | jq -c ".[0]")
          
          echo "release=$release" >> $GITHUB_OUTPUT
          echo "release_data=$release_data" >> $GITHUB_OUTPUT

      - name: Unpack release data
        id: unpack-release
        run: |
          release_data=${{ steps.latest-release.outputs.release_data }}

          echo "date=$(echo "$release_data" | jq .publishedAt)" >> $GITHUB_OUTPUT
          echo "tag=$(echo "$release_data" | jq .tagName)" >> $GITHUB_OUTPUT
          echo "name=$(echo "$release_data" | jq .name)" >> $GITHUB_OUTPUT
          echo "draft=$(echo "$release_data" | jq .isDraft)" >> $GITHUB_OUTPUT
          echo "latest=$(echo "$release_data" | jq .isLatest)" >> $GITHUB_OUTPUT

      - name: Test existing release
        if: ! steps.latest-release.outputs.release
        run: |
          echo "::warning::No releases found for ${{ github.repository }}. Setting default version '${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}'"
          exit 0

      - name: Test release drafts
        if: steps.unpack-release.outputs.draft != null
        run: |
          echo "::warning::Release draft already present: ${{ steps.unpack-release.outputs.name }}"
          exit 0

      - name: Fail Succesfully
        run: |
          echo "::error::Failed Successfully"
          exit 1

  merge-to-main:
    runs-on: ubuntu-latest
    needs: get-latest-releases

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ vars.MAIN_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ vars.MAIN_BRANCH }}
          fetch-depth: 0

      - name: üîë Set Bot Authentication
        run: |
          git config --global user.email "${{ env.GH_EMAIL }}"
          git config --global user.name "${{ env.GH_USER }}"

      - name: üîÄ Merge ${{ github.ref_name }} -> ${{ vars.MAIN_BRANCH }}
        run: |
          git pull origin ${{ github.ref_name }}
          git merge --no-ff origin/${{ github.ref_name }} -m "[Automated] Merged ${{ github.ref_name }} -> ${{ vars.MAIN_BRANCH }}"

      # TODO implement this using gh command
      - name: üîè Push to protected main branch
        uses: CasperWA/push-protected@v2.15.0
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ${{ vars.MAIN_BRANCH }}
          tags: true
          unprotect_reviews: true


  get-version-increment:
    runs-on: ubuntu-latest
    needs: get-latest-releases
    # TODO research if empty string or no assignment works better
    outputs:
      version-increment: ${{ steps.valid_version_label.outputs.version_increment || null }}

    steps:
      - name: üìÖ Get the latest release date
        id: last_release_date
        run: |
          last_release=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | [.published_at] | @tsv' | awk -F '\t' '{print $1 " " $2 " " $3}' | head -n 1)
          echo "last_release_date=$last_release" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get labels of merged PRs since last release
        id: merged_pr_labels
        env:
          release_date: ${{ steps.last_release_date.outputs.last_release_date }}
        # INFO last line conversion is required since $GITHUB_OUPUT doesn't except multi-line strings
        run: |
          json_data_pr_labels=$(gh pr list --state merged --search "merged:>=${{ env.release_date }}" --json labels --repo ${{ github.repository }})
          echo "$json_data_pr_labels"
          pr_label_list=$(echo "$json_data_pr_labels" | jq -r '.[].labels[].name' | sort | uniq | tr '\n' '${{ env.LABEL_DELIMITTER }}')
          label_list=${pr_label_list%,}
          echo "$label_list"
          echo "label_list=$label_list" >> $GITHUB_OUTPUT

      - name: üîç Check for valid labels
        id: valid_version_label
        env:
          LABEL_LIST: ${{ steps.merged_pr_labels.outputs.label_list }}
          MINOR_LABEL: ${{ vars.MINOR_BUMP_LABEL }}
          PATCH_LABEL: ${{ vars.PATCH_BUMP_LABEL }}
        run: |
          # INFO convert csv string to bash arrays
          # TODO fix up first line so they can be handled in a streamilned way
          IFS=',' read -r -a label_list <<< "${{ env.LABEL_LIST }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a minor_patterns <<< "${{ env.MINOR_LABEL }}"
          IFS='${{ env.LABEL_DELIMITTER }}' read -r -a patch_patterns <<< "${{ env.PATCH_LABEL }}"
          minor_patch=${{ env.PATCH_LABEL }}

          echo "pr_labels=${label_list[*]}" >> $GITHUB_OUTPUT

          for label in ${minor_patterns[@]}; do
            if echo "${label_list[*]}" | grep -iqFe "$label"; then
              echo "version_increment=minor" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          for label in ${patch_patterns[@]}; do
            if echo "${label_list[*]}" | grep -iqFe "$label"; then
              echo "version_increment=patch" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
        
          if -z label_list; then
            echo "::warning::No labels found."
            exit 0
          fi

          exit 0

      - name: ‚ùó Validate labels
        if: ${{ steps.last_release_date.outputs.last_release_date }}
        env:
          LABEL_LIST: ${{ steps.merged_pr_labels.outputs.label_list }}
        run: |
          if [ -z "${{ env.LABEL_LIST }}" ]; then
            echo "::error:: No PR labels found. Can't create a new release."
            exit 1
          fi

          if [ -z "${{ steps.valid_version_label.outputs.version_increment }}" ]; then
            # TODO Format using line breaks - not supported by annotations
            echo "::error:: No valid versioning labels found in PRs. Only found these labels: ${{ steps.valid_version_label.outputs.pr_labels }}. Are you sure you want to create a new release?"
            exit 1
          fi


  update-version-tag:
    # TODO streamline this execution to not require empty runs
    runs-on: ubuntu-latest
    needs: get-version-increment
    env:
      VERSION_INCREMENT: ${{needs.get-version-increment.outputs.version-increment}}

    steps:
      # TODO dive into the action as reference to implement custom actions
      - name: üîº Get next Version Tag
        if: ${{ needs.get-version-increment.outputs.version-increment }}
        uses: reecetech/version-increment@2024.4.4
        id: calculated_version_tag
        with:
          scheme: semver
          increment: ${{ env.VERSION_INCREMENT }}
          release_branch: main
          use_api: true

      - name: Set Version Tag
        id: set_tag
        run: |
          echo "MAJOR=${{ steps.calculated_version_tag.outputs.major-version || env.MAJOR }}" >> $GITHUB_ENV
          echo "MINOR=${{ steps.calculated_version_tag.outputs.minor-version || env.MINOR }}" >> $GITHUB_ENV
          echo "PATCH=${{ steps.calculated_version_tag.outputs.patch-version || env.PATCH }}" >> $GITHUB_ENV


  build-from-main:
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: "artifact"
    needs:
      - merge-to-main
      - update-version-tag
    outputs:
      artifact_file: ${{ steps.create-artifact.outputs.file_name }}

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ vars.MAIN_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ vars.MAIN_BRANCH }}
          fetch-depth: 0

      - name: Get artifact name
        id: artifact
        run: |
          name=$(grep -oP '^name\s*=\s*"\K[^"]+' package.py)
          version=$(grep -oP '^version\s*=\s*"\K[^"]+' package.py)

          echo "name=$name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create artifacts
        id: create-artifact
        run: |
          python create_package.py --output ${{ env.OUTPUT_DIR }}
          echo "file_name=${{ steps.artifact.outputs.name }}-${{ steps.artifact.outputs.version }}.zip" >> $GITHUB_OUTPUT

      # TODO update version number in package.py
      # - name: Update package.py version to ${{ next_version }}
        # TODO figure out next version before this

        # TODO update version in package.py
        

      - name: üîº Upload zip artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.OUTPUT_DIR }}/${{ steps.create-artifact.outputs.file_name }}


  update-develop:
    runs-on: ubuntu-latest
    needs: build-from-main

    steps:
      - name: ‚¨áÔ∏è Checkout ${{ github.ref_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: üîë Set Bot Authentication
        run: |
          # INFO might also require bot token first
          git config --global user.email "${{ secrets.CI_EMAIL }}"
          git config --global user.name "${{ secrets.CI_USER }}"

      - name: üîÅ Merge ${{ vars.MAIN_BRANCH }} -> ${{ github.ref_name }}
        run: |
          git pull origin ${{ vars.MAIN_BRANCH }}
          git merge origin/${{ vars.MAIN_BRANCH }} -m "[Automated] Merged ${{ vars.MAIN_BRANCH }} -> ${{ github.ref_name }}"
          git push origin ${{ github.ref_name }}


  create-release:
    runs-on: ubuntu-latest
    needs: 
      - build-from-main
      - update-version-tag

    steps:
      - name: üîΩ Download zip artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: üöÄ Create Github Release Draft
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"
          generateReleaseNotes: true
          artifacts: ${{ vars.ARTIFACT_FILE_NAME }}
          token: ${{ env.GH_TOKEN }}
          draft: true


  verify-release:
    runs-on: ubuntu-latest
    needs:
      - create-release
      - update-version-tag
    # INFO this will cause an error if a release draft with the same tag already exists
    steps:
      - name: Fetch Latest Release Draft
        id: fetch-latest-release-draft
        run: |
          current_release_name="$(gh release list --repo ${{ github.repository }} --json isDraft,name,createdAt --jq '[.[] | select(.isDraft == true)] | sort_by(.createdAt) | reverse | .[0].name')"
          echo "current_release_name=$current_release_name" >> $GITHUB_OUTPUT

      - name: üîç Check Release-Draft Name
        id: check-release-tag
        env:
          expected_version_tag: "${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"
          latest_release_draft: ${{ steps.fetch-latest-release-draft.outputs.current_release_name }}

        run: |
          if [ "${{ env.expected_version_tag }}" == "${{ env.latest_release_draft }}" ]; then
            echo "::notice::Success, release found with the expected name ${{ env.expected_version_tag }}."
            exit 0
          fi

          echo "::error::Expected tag ${{ env.expected_version_tag }}, but found ${{ env.latest_release_draft }}."
          exit 1
